{"version":3,"sources":["components/Playlist/Playlist.jsx","components/SoundItemForm/SoundItemForm.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["Playlist","props","useState","isStop","changeStop","handleStatusChange","useCallback","onChange","id","author","song","mp3","status","audio","document","getElementById","play","pause","handleStop","currentTime","handleDeleteSong","onDelete","className","src","volume","onClick","SoundItemForm","setAuthor","setSong","setMp3","setStatus","handleSubmit","event","preventDefault","onSave","onSubmit","htmlFor","type","name","target","value","App","isFormVisible","changeFormVisibility","list","changeList","handleChange","prevState","map","songItem","currentStatus","handleCreateSong","createNewSongItem","concat","Math","random","toString","substr","handleDelete","filter","songList","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4f816cad.chunk.js","sourcesContent":["import { useState, useCallback } from 'react'\r\nimport './Playlist.css'\r\n\r\nfunction Playlist(props) {\r\n    const [isStop, changeStop] = useState(false);//////\r\n\r\n\r\n    const handleStatusChange = useCallback(() => {\r\n        props.onChange(props.id, props.author, props.song, props.mp3, props.status);\r\n        const audio = document.getElementById(`${props.id}`);\r\n        (props.status === 'stop') ? audio.play() : audio.pause();\r\n        changeStop(!isStop);\r\n    }, [props]);\r\n\r\n    const handleStop = useCallback(() => {\r\n        props.onChange(props.id, props.author, props.song, props.mp3, props.status);\r\n        const audio = document.getElementById(`${props.id}`);\r\n        audio.pause();\r\n        audio.currentTime = 0;\r\n        changeStop(!isStop);\r\n    }, [props]);\r\n\r\n    const handleDeleteSong = useCallback(() => {\r\n        props.onDelete(props.id);\r\n    }, [props]);\r\n    return (\r\n        <div className={`song-item is-${props.status}`}>\r\n            <div>\r\n                {props.status}\r\n            </div>\r\n            <audio src={props.mp3} id={props.id} volume=\"0.1\">\r\n            </audio>\r\n            <div className=\"song-item-name\">\r\n                <span className=\"song-author\">\r\n                    {props.author}\r\n                </span>\r\n                <span className=\"song-title\">\r\n                    {props.song}\r\n                </span>\r\n            </div>\r\n            <button className=\"sound-btn\" onClick={handleStatusChange}>{(props.status === \"stop\") ? '‚ñ∫' : '‚ùö‚ùö'}</button>\r\n            {isStop ? (<button className=\"sound-btn btn-stop\" id=\"stop\" onClick={handleStop}>‚ñ†</button>) : null}\r\n            {/* <button className=\"sound-btn btn-stop\" id=\"stop\" onClick={handleStatusChange}>‚ñ†</button> */}\r\n            <button className=\"sound-btn btn-dell\" onClick={handleDeleteSong}>‚ê°</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Playlist;","import { useState, useCallback } from 'react';\r\nimport './SoundItemForm.css'\r\n\r\nconst SoundItemForm = (props) => {\r\n    const [author, setAuthor] = useState('');\r\n    const [song, setSong] = useState('');\r\n    const [mp3, setMp3] = useState('');\r\n    const [status, setStatus] = useState('stop');\r\n    const handleSubmit = useCallback((event) => {\r\n        event.preventDefault();\r\n        setStatus('stop');\r\n        props.onSave(author, song, mp3, status);\r\n    }, [author, song, mp3, status, props]);\r\n    return (\r\n        <form className=\"sound-item-form\" onSubmit={handleSubmit}>\r\n            {/* <div>\r\n                <label htmlFor=\"state\">State</label>\r\n                <select name=\"state\" id=\"state\">\r\n                    <option value=\"stop\">Stop</option>\r\n                    <option value=\"play\">Play</option>\r\n                </select>\r\n            </div> */}\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"author\">Author</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"author\"\r\n                    id=\"author\"\r\n                    onChange={(event) => setAuthor(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"song\">Song</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"song\"\r\n                    id=\"song\"\r\n                    onChange={(event) => setSong(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"mp3\">Mp3</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"mp3\"\r\n                    id=\"mp3\"\r\n                    onChange={(event) => setMp3(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"centered\">\r\n                <button type=\"submit\" className=\"btn-form-add\">Add üé∂</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SoundItemForm;","import { useCallback, useState } from 'react';\nimport Playlist from '../Playlist/Playlist';\nimport SoundItemForm from '../SoundItemForm/SoundItemForm';\n\nimport './App.css';\n\nfunction changeStatus(currentStatus) {\n  if (currentStatus === 'stop') {\n    return 'play'\n  } else {\n    return 'stop'\n  }\n}\n\nfunction generateId() {\n  return `todo-${Math.random().toString(36).substr(2, 9)}`;\n}\nfunction App() {\n  const [isFormVisible, changeFormVisibility] = useState(false);\n  const [list, changeList] = useState([\n    { id: \"todo-0001\", author: \"Led Zeppelin\", song: \"Stairway To Heaven\", mp3: \"../mp3/audio1.mp3\", status: \"stop\" },\n    { id: \"todo-0002\", author: \"Queen\", song: \"Bohemian Rhapsody\", mp3: \"../mp3/audio2.mp3\", status: \"stop\" },\n    { id: \"todo-0003\", author: \"Lynyrd Skynyrd\", song: \"Free Bird\", mp3: \"../mp3/audio3.mp3\", status: \"stop\" },\n    { id: \"todo-0004\", author: \"Deep Purple\", song: \"Smoke on the Water\", mp3: \"../mp3/audio4.mp3\", status: \"stop\" },\n    { id: \"todo-0005\", author: \"Jimi Hendrix\", song: \"All Along The Watchtower\", mp3: \"../mp3/audio5.mp3\", status: \"stop\" },\n    { id: \"todo-0006\", author: \"AC/DC\", song: \"Back In Black\", mp3: \"../mp3/audio6.mp3\", status: \"stop\" },\n    { id: \"todo-0007\", author: \"Queen\", song: \"We Will Rock You \", mp3: \"../mp3/audio7.mp3\", status: \"stop\" },\n    { id: \"todo-0008\", author: \"Metallica\", song: \"Enter Sandman\", mp3: \"../mp3/audio8.mp3\", status: \"stop\" }\n  ])\n\n  const handleChange = useCallback((id, author, song, mp3, status) => {\n    changeList((prevState) => {\n      const newState = prevState.map((songItem) => {\n        if (songItem.id === id) {\n          return {\n            id: id,\n            author: author,\n            song: song,\n            mp3: mp3,\n            status: changeStatus(status),\n          };\n        }\n        return songItem;\n      });\n      return newState;\n    });\n  }, []);\n\n  const handleCreateSong = useCallback(() => {\n    changeFormVisibility(true);\n  }, []);\n\n  const createNewSongItem = useCallback((author, song, mp3, status) => {\n    changeList((prevState) => {\n      const newState = prevState.concat([{ id: generateId(), author, song, mp3, status }]);\n      return newState;\n    });\n    changeFormVisibility(false);\n  }, []);\n\n  const handleDelete = useCallback((id) => {\n    changeList((prevState) => {\n      const newState = prevState.filter((songItem) => {\n        return songItem.id !== id;\n      });\n      return newState;\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Song list</h1>\n      {list.map((songList) => {\n        return (\n          <Playlist\n            key={songList.id}\n            id={songList.id}\n            author={songList.author}\n            song={songList.song}\n            mp3={songList.mp3}\n            status={songList.status}\n            onChange={handleChange}\n            onDelete={handleDelete}\n          />\n        )\n      })}\n      <div className=\"centered\">\n        <button className=\"btn-form\" onClick={handleCreateSong}>New üé∂</button>\n      </div>\n      {isFormVisible ? (<SoundItemForm onSave={createNewSongItem} />) : null}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}