{"version":3,"sources":["components/Playlist/Playlist.jsx","components/SoundItemForm/SoundItemForm.jsx","components/App/App.js","reportWebVitals.js","index.js"],"names":["Playlist","props","audioMy","useRef","useState","changeStop","songList","document","querySelectorAll","handleStatusChange","useCallback","onChange","id","author","song","mp3","status","map","list","pause","current","play","handleDeleteSong","currentTime","onDelete","className","icon","faPause","faPlay","ref","src","volume","onClick","faMinus","SoundItemForm","setAuthor","setSong","setMp3","setStatus","handleSubmit","event","preventDefault","onSave","onSubmit","htmlFor","type","name","target","value","Button","variant","App","isFormVisible","changeFormVisibility","changeList","handleChange","prevState","songItem","currentStatus","handleCreateSong","console","log","createNewSongItem","concat","Math","random","toString","substr","handleDelete","filter","Navbar","bg","Brand","href","faMusic","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6e9333cd.chunk.js","sourcesContent":["import { useState, useCallback, useRef } from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faStop, faPause, faMinus } from '@fortawesome/free-solid-svg-icons';\r\nimport './Playlist.css'\r\nimport { render } from '@testing-library/react';\r\n\r\nfunction Playlist(props) {\r\n    const audioMy = useRef();\r\n    const [isStop, changeStop] = useState(false);\r\n    const songList = [...document.querySelectorAll(\"audio\")];\r\n    const handleStatusChange = useCallback(() => {\r\n        props.onChange(props.id, props.author, props.song, props.mp3, props.status);\r\n        songList.map((list) => list.pause());\r\n        if (props.status === 'stop') {\r\n            songList.map((list) => list.pause());\r\n            audioMy.current.play();\r\n            changeStop(true);\r\n        } else {\r\n            audioMy.current.pause();\r\n            changeStop(false);\r\n        }\r\n    }, [props]);\r\n    const handleStop = useCallback(() => {\r\n        props.onChange(props.id, props.author, props.song, props.mp3, 'play');\r\n        audioMy.current.pause();\r\n        audioMy.current.currentTime = 0;\r\n        changeStop(false);\r\n    }, [props]);\r\n\r\n    const handleDeleteSong = useCallback(() => {\r\n        props.onDelete(props.id);\r\n    }, [props]);\r\n    return (\r\n        <div className={`song-item is-${props.status}`}>\r\n            <div className=\"status\">\r\n                {(props.status == 'stop') ? <FontAwesomeIcon icon={faPause} /> : <FontAwesomeIcon icon={faPlay} />}\r\n            </div>\r\n            <audio ref={audioMy} src={props.mp3} id={props.id} volume=\"0.1\">\r\n            </audio>\r\n            <div className=\"song-item-name\">\r\n                <span className=\"song-author\">\r\n                    {props.author}\r\n                </span>\r\n                <span className=\"song-title\">\r\n                    {props.song}\r\n                </span>\r\n            </div>\r\n            <button className=\"sound-btn\" onClick={handleStatusChange}>{(props.status === \"stop\") ? <FontAwesomeIcon icon={faPlay} /> : <FontAwesomeIcon icon={faPause} />}</button>\r\n            {/* {isStop ? (<button className=\"sound-btn\" id=\"stop\" onClick={handleStop}><FontAwesomeIcon icon={faStop} /></button>) : null} */}\r\n            <button className=\"sound-btn\" onClick={handleDeleteSong}>\r\n                <FontAwesomeIcon icon={faMinus} />\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Playlist;","import { useState, useCallback } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport './SoundItemForm.css'\r\n\r\nconst SoundItemForm = (props) => {\r\n    const [author, setAuthor] = useState('');\r\n    const [song, setSong] = useState('');\r\n    const [mp3, setMp3] = useState('');\r\n    const [status, setStatus] = useState('stop');\r\n    const handleSubmit = useCallback((event) => {\r\n        event.preventDefault();\r\n        setStatus('stop');\r\n        props.onSave(author, song, mp3, status);\r\n    }, [author, song, mp3, status, props]);\r\n    return (\r\n        <form className=\"sound-item-form\" onSubmit={handleSubmit}>\r\n            {/* <div>\r\n                <label htmlFor=\"state\">State</label>\r\n                <select name=\"state\" id=\"state\">\r\n                    <option value=\"stop\">Stop</option>\r\n                    <option value=\"play\">Play</option>\r\n                </select>\r\n            </div> */}\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"author\">Author</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"author\"\r\n                    id=\"author\"\r\n                    onChange={(event) => setAuthor(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"song\">Song</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"song\"\r\n                    id=\"song\"\r\n                    onChange={(event) => setSong(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"form-item\">\r\n                <label className=\"form-label\" htmlFor=\"mp3\">Mp3</label>\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    name=\"mp3\"\r\n                    id=\"mp3\"\r\n                    onChange={(event) => setMp3(event.target.value)}\r\n                />\r\n            </div>\r\n            <div className=\"centered\">\r\n                <Button type=\"submit\" variant=\"outline-info mb-2\">Add 🎶</Button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default SoundItemForm;","import { useCallback, useState } from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faMusic } from '@fortawesome/free-solid-svg-icons';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport SoundItemForm from '../SoundItemForm/SoundItemForm';\r\n\r\nimport './App.css';\r\n\r\nfunction changeStatus(currentStatus) {\r\n  if (currentStatus === 'stop') {\r\n    return 'play'\r\n  } else {\r\n    return 'stop'\r\n  }\r\n}\r\n\r\nfunction generateId() {\r\n  return `todo-${Math.random().toString(36).substr(2, 9)}`;\r\n}\r\nfunction App() {\r\n  const [isFormVisible, changeFormVisibility] = useState(false);\r\n  const [list, changeList] = useState([\r\n    { id: \"todo-0001\", author: \"Led Zeppelin\", song: \"Stairway To Heaven\", mp3: \"../mp3/audio1.mp3\", status: \"stop\" },\r\n    { id: \"todo-0002\", author: \"Queen\", song: \"Bohemian Rhapsody\", mp3: \"../mp3/audio2.mp3\", status: \"stop\" },\r\n    { id: \"todo-0003\", author: \"Lynyrd Skynyrd\", song: \"Free Bird\", mp3: \"../mp3/audio3.mp3\", status: \"stop\" },\r\n    { id: \"todo-0004\", author: \"Deep Purple\", song: \"Smoke on the Water\", mp3: \"../mp3/audio4.mp3\", status: \"stop\" },\r\n    { id: \"todo-0005\", author: \"Jimi Hendrix\", song: \"All Along The Watchtower\", mp3: \"../mp3/audio5.mp3\", status: \"stop\" },\r\n    { id: \"todo-0006\", author: \"AC/DC\", song: \"Back In Black\", mp3: \"../mp3/audio6.mp3\", status: \"stop\" },\r\n    { id: \"todo-0007\", author: \"Queen\", song: \"We Will Rock You \", mp3: \"../mp3/audio7.mp3\", status: \"stop\" },\r\n    { id: \"todo-0008\", author: \"Metallica\", song: \"Enter Sandman\", mp3: \"../mp3/audio8.mp3\", status: \"stop\" }\r\n  ])\r\n\r\n  const handleChange = useCallback((id, author, song, mp3, status) => {\r\n    changeList((prevState) => {\r\n      const newState = prevState.map((songItem) => {\r\n        songItem.status = \"stop\";\r\n        if (songItem.id === id) {\r\n          return {\r\n            id: id,\r\n            author: author,\r\n            song: song,\r\n            mp3: mp3,\r\n            status: changeStatus(status),\r\n          };\r\n        }\r\n        return songItem;\r\n      });\r\n      return newState;\r\n    });\r\n  }, []);\r\n\r\n  const handleCreateSong = useCallback(() => {\r\n    changeFormVisibility(!isFormVisible);\r\n  }, []);\r\n\r\n  console.log(!isFormVisible);\r\n  const createNewSongItem = useCallback((author, song, mp3, status) => {\r\n    changeList((prevState) => {\r\n      const newState = prevState.concat([{ id: generateId(), author, song, mp3, status }]);\r\n      return newState;\r\n    });\r\n    changeFormVisibility(false);\r\n  }, []);\r\n\r\n  const handleDelete = useCallback((id) => {\r\n    changeList((prevState) => {\r\n      const newState = prevState.filter((songItem) => {\r\n        return songItem.id !== id;\r\n      });\r\n      return newState;\r\n    })\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar bg=\"info\">\r\n        <Navbar.Brand className=\"text-light\" href=\"#home\">\r\n          <FontAwesomeIcon icon={faMusic} className=\"logo-icon mr-3\" />\r\n        Audio list\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n      {list.map((songList) => {\r\n        return (\r\n          <Playlist\r\n            key={songList.id}\r\n            id={songList.id}\r\n            author={songList.author}\r\n            song={songList.song}\r\n            mp3={songList.mp3}\r\n            status={songList.status}\r\n            onChange={handleChange}\r\n            onDelete={handleDelete}\r\n          />\r\n        )\r\n      })}\r\n      <div className=\"centered\">\r\n        <Button variant=\"outline-info mb-2\" onClick={handleCreateSong}>New 🎶</Button>\r\n      </div>\r\n      {isFormVisible ? (<SoundItemForm onSave={createNewSongItem} />) : null}\r\n      <Navbar bg=\"info\">\r\n        <Navbar.Brand className=\"text-light\" href=\"#home\">\r\n          <FontAwesomeIcon icon={faMusic} className=\"logo-icon mr-3\" />\r\n        Audio list\r\n        </Navbar.Brand>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './components/App/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}